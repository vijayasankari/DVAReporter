// src/components/VulnerabilityPicker.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';

const cvssDefault = {
  AV: '', AC: '', PR: '', UI: '', S: '', C: '', I: '', A: ''
};

const metricOptions = {
  AV: { label: "Attack Vector", values: { N: "Network", A: "Adjacent", L: "Local", P: "Physical" } },
  AC: { label: "Attack Complexity", values: { L: "Low", H: "High" } },
  PR: { label: "Privileges Required", values: { N: "None", L: "Low", H: "High" } },
  UI: { label: "User Interaction", values: { N: "None", R: "Required" } },
  S:  { label: "Scope", values: { U: "Unchanged", C: "Changed" } },
  C:  { label: "Confidentiality", values: { H: "High", L: "Low", N: "None" } },
  I:  { label: "Integrity", values: { H: "High", L: "Low", N: "None" } },
  A:  { label: "Availability", values: { H: "High", L: "Low", N: "None" } }
};

function calculateCVSS(values) {
  const { AV, AC, PR, UI, S, C, I, A } = values;
  if (!(AV && AC && PR && UI && S && C && I && A)) return null;

  const base = {
    AV: { N: 0.85, A: 0.62, L: 0.55, P: 0.2 },
    AC: { L: 0.77, H: 0.44 },
    PR: { U: { N: 0.85, L: 0.62, H: 0.27 }, C: { N: 0.85, L: 0.68, H: 0.5 } },
    UI: { N: 0.85, R: 0.62 },
    C: { H: 0.56, L: 0.22, N: 0.0 },
    I: { H: 0.56, L: 0.22, N: 0.0 },
    A: { H: 0.56, L: 0.22, N: 0.0 }
  };

  const iss = 1 - ((1 - base.C[C]) * (1 - base.I[I]) * (1 - base.A[A]));
  const impact = S === 'U' ? 6.42 * iss : 7.52 * (iss - 0.029) - 3.25 * (iss - 0.02) ** 15;
  const exploitability = 8.22 * base.AV[AV] * base.AC[AC] * base.PR[S][PR] * base.UI[UI];
  let score = impact <= 0 ? 0 : (S === 'U' ? impact + exploitability : 1.08 * (impact + exploitability));
  score = Math.ceil(Math.min(score, 10) * 10) / 10;

  const vector = `CVSS:3.1/AV:${AV}/AC:${AC}/PR:${PR}/UI:${UI}/S:${S}/C:${C}/I:${I}/A:${A}`;
  return { score, vector };
}

function VulnerabilityPicker({ selected, setSelected }) {
  const [allVulns, setAllVulns] = useState([]);
  const [cvssValues, setCvssValues] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedId, setExpandedId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get('http://127.0.0.1:8000/vulnerabilities/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setAllVulns(res.data);
      } catch (err) {
        if (err.response?.status === 401) {
          toast.error("Session expired. Please log in again.");
          localStorage.removeItem("token");
          window.location.reload();
        } else {
          toast.error("❌ Failed to fetch vulnerabilities.");
        }
      }
    };
    fetchData();
  }, []);

  const handleCVSSChange = (id, key, val) => {
    setCvssValues(prev => ({
      ...prev,
      [id]: { ...(prev[id] || cvssDefault), [key]: val }
    }));
  };

  const handleAdd = (vuln) => {
    const calc = calculateCVSS(cvssValues[vuln.id]);
    if (!calc) return toast.warning("⚠️ Please complete CVSS inputs.");

    let severity = "Low";
    if (calc.score >= 9.0) severity = "Critical";
    else if (calc.score >= 7.0) severity = "High";
    else if (calc.score >= 4.0) severity = "Medium";

    const instance = {
      ...vuln,
      severity,
      cvss_score: calc.score.toString(),
      cvss_vector: calc.vector,
      instanceId: `${vuln.id}-${Date.now()}`
    };
    setSelected(prev => [...prev, instance]);
    toast.success(`✅ Added "${vuln.title}" to report`);
  };

  const handleRemove = (instanceId) => {
    setSelected(prev => prev.filter(v => v.instanceId !== instanceId));
  };

  const toggleExpanded = (id) => {
    setExpandedId(expandedId === id ? null : id);
  };

  const filteredVulns = allVulns.filter(v =>
    v.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="flex gap-6">
      <div className="w-1/2 border p-4 space-y-4 overflow-y-scroll" style={{ maxHeight: '600px' }}>
        <h2 className="font-bold text-lg">All Vulnerabilities</h2>
        <input
          type="text"
          className="border p-2 w-full mb-2"
          placeholder="Search vulnerabilities..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <ul className="space-y-4">
          {filteredVulns.map(v => (
            <li key={v.id} className="border p-3 rounded bg-white shadow transition">
              <div className="flex justify-between items-center">
                <div className="font-semibold">{v.title}</div>
                <div className="flex gap-2">
                  <button
                    className="text-sm text-blue-600 underline"
                    onClick={() => toggleExpanded(v.id)}
                  >
                    {expandedId === v.id ? "Hide CVSS" : "Show CVSS"}
                  </button>
                  <button
                    className="bg-blue-600 text-white text-sm px-3 py-1 rounded"
                    onClick={() => handleAdd(v)}
                  >
                    Add
                  </button>
                </div>
              </div>

              {expandedId === v.id && (
                <div className="grid grid-cols-2 gap-2 mt-3">
                  {Object.keys(metricOptions).map(key => (
                    <div key={key}>
                      <label className="text-sm">{metricOptions[key].label}</label>
                      <select
                        className="border p-1 w-full"
                        value={cvssValues[v.id]?.[key] || ''}
                        onChange={e => handleCVSSChange(v.id, key, e.target.value)}
                      >
                        <option value="">Select</option>
                        {Object.entries(metricOptions[key].values).map(([val, name]) => (
                          <option key={val} value={val}>{name} ({val})</option>
                        ))}
                      </select>
                    </div>
                  ))}
                </div>
              )}
            </li>
          ))}
        </ul>
      </div>

      <div className="w-1/2 border p-4 bg-blue-50 space-y-4 overflow-y-auto" style={{ maxHeight: '600px' }}>
        <h2 className="font-bold text-lg">Selected Vulnerabilities</h2>
        <ul className="space-y-4">
          {selected.map(v => (
            <li key={v.instanceId} className="border p-3 rounded bg-white shadow">
              <div className="font-semibold">{v.title}</div>
              <div className="text-sm text-gray-700">
                Severity: <strong>{v.severity}</strong><br />
                CVSS Score: {v.cvss_score}<br />
                CVSS Vector: {v.cvss_vector}
              </div>
              <button
                className="text-red-600 mt-2 text-sm"
                onClick={() => handleRemove(v.instanceId)}
              >
                Remove
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default VulnerabilityPicker;
